/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext {
		springBootVersion = '2.2.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.17.2")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'org.springframework.cloud'
archivesBaseName = 'bookstore-service-broker'
version = '0.0.1.BUILD-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/release" }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.hateoas:spring-hateoas:1.0.2.RELEASE')
	compile('org.springframework.cloud:spring-cloud-starter-open-service-broker:3.1.0.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile('io.projectreactor:reactor-test')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
}

if (!project.hasProperty("dockerGroup")) {
	ext.dockerGroup = "sample"
}

docker {
	name "${dockerGroup}/bookstore-service-broker:${version}"
	dockerfile file('../deploy/docker/Dockerfile')
	files jar.archivePath
	buildArgs(['JAR_FILE': "${jar.archiveName}"])
}
